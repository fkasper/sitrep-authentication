// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED
// GENERATED USING KEYSPACE bio
// AT 2015-12-24 10:19:21.802164427 +0100 CET USING cqlc VERSION 0.10.5
// AGAINST HOST ID 7b6304b7-a8d3-40a1-ba20-65197ce686fb (SERVER VERSION 2.2.2)
// CLIENT NEGOTIATED CQL VERSION 3.0.0 (SERVER SUPPORTS UP TO 3.3.1)

package bio

import (
	"log"

	"github.com/gocql/gocql"

	"time"

	"github.com/relops/cqlc/cqlc"
)

const (
	CQLC_VERSION = "0.10.5"
)

type DomainsDomainNameColumn struct {
	desc bool
}

func (b *DomainsDomainNameColumn) ColumnName() string {
	return "domain_name"
}

func (b *DomainsDomainNameColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *DomainsDomainNameColumn) ClusterWith() string {
	return b.ColumnName()
}

func (b *DomainsDomainNameColumn) Desc() cqlc.ClusteredColumn {
	return &DomainsDomainNameColumn{desc: true}
}

func (b *DomainsDomainNameColumn) IsDescending() bool {
	return b.desc
}

func (b *DomainsDomainNameColumn) Eq(value string) cqlc.Condition {
	column := &DomainsDomainNameColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

func (b *DomainsDomainNameColumn) Gt(value string) cqlc.Condition {
	column := &DomainsDomainNameColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.GtPredicate}
}
func (b *DomainsDomainNameColumn) Ge(value string) cqlc.Condition {
	column := &DomainsDomainNameColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.GePredicate}
}
func (b *DomainsDomainNameColumn) Lt(value string) cqlc.Condition {
	column := &DomainsDomainNameColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.LtPredicate}
}
func (b *DomainsDomainNameColumn) Le(value string) cqlc.Condition {
	column := &DomainsDomainNameColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.LePredicate}
}

type DomainsIdColumn struct {
}

func (b *DomainsIdColumn) ColumnName() string {
	return "id"
}

func (b *DomainsIdColumn) To(value *gocql.UUID) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *DomainsIdColumn) Eq(value gocql.UUID) cqlc.Condition {
	column := &DomainsIdColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

func (b *DomainsIdColumn) PartitionBy() cqlc.Column {
	return b
}

func (b *DomainsIdColumn) In(value ...gocql.UUID) cqlc.Condition {
	column := &DomainsIdColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.InPredicate}
}

type DomainsOrganizationIdColumn struct {
}

func (b *DomainsOrganizationIdColumn) ColumnName() string {
	return "organization_id"
}

func (b *DomainsOrganizationIdColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *DomainsOrganizationIdColumn) Eq(value string) cqlc.Condition {
	column := &DomainsOrganizationIdColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

type DomainsOrganizationNameColumn struct {
}

func (b *DomainsOrganizationNameColumn) ColumnName() string {
	return "organization_name"
}

func (b *DomainsOrganizationNameColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type DomainsPortColumn struct {
	desc bool
}

func (b *DomainsPortColumn) ColumnName() string {
	return "port"
}

func (b *DomainsPortColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *DomainsPortColumn) ClusterWith() string {
	return b.ColumnName()
}

func (b *DomainsPortColumn) Desc() cqlc.ClusteredColumn {
	return &DomainsPortColumn{desc: true}
}

func (b *DomainsPortColumn) IsDescending() bool {
	return b.desc
}

func (b *DomainsPortColumn) Eq(value string) cqlc.Condition {
	column := &DomainsPortColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

func (b *DomainsPortColumn) In(value ...string) cqlc.Condition {
	column := &DomainsPortColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.InPredicate}
}

func (b *DomainsPortColumn) Gt(value string) cqlc.Condition {
	column := &DomainsPortColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.GtPredicate}
}
func (b *DomainsPortColumn) Ge(value string) cqlc.Condition {
	column := &DomainsPortColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.GePredicate}
}
func (b *DomainsPortColumn) Lt(value string) cqlc.Condition {
	column := &DomainsPortColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.LtPredicate}
}
func (b *DomainsPortColumn) Le(value string) cqlc.Condition {
	column := &DomainsPortColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.LePredicate}
}

type DomainsSettingsColumn struct {
}

func (b *DomainsSettingsColumn) ColumnName() string {
	return "settings"
}

func (b *DomainsSettingsColumn) To(value *map[string]string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type DomainsTransparentTargetColumn struct {
}

func (b *DomainsTransparentTargetColumn) ColumnName() string {
	return "transparent_target"
}

func (b *DomainsTransparentTargetColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type DomainsTypeColumn struct {
}

func (b *DomainsTypeColumn) ColumnName() string {
	return "type"
}

func (b *DomainsTypeColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type Domains struct {
	DomainName string

	Id gocql.UUID

	OrganizationId string

	OrganizationName string

	Port string

	Settings map[string]string

	TransparentTarget string

	Type string
}

func (s *Domains) DomainNameValue() string {
	return s.DomainName
}

func (s *Domains) IdValue() gocql.UUID {
	return s.Id
}

func (s *Domains) OrganizationIdValue() string {
	return s.OrganizationId
}

func (s *Domains) OrganizationNameValue() string {
	return s.OrganizationName
}

func (s *Domains) PortValue() string {
	return s.Port
}

func (s *Domains) SettingsValue() map[string]string {
	return s.Settings
}

func (s *Domains) TransparentTargetValue() string {
	return s.TransparentTarget
}

func (s *Domains) TypeValue() string {
	return s.Type
}

type DomainsDef struct {
	DOMAIN_NAME cqlc.ClusteredStringColumn

	ID cqlc.LastPartitionedUUIDColumn

	ORGANIZATION_ID cqlc.EqualityStringColumn

	ORGANIZATION_NAME cqlc.StringColumn

	PORT cqlc.LastClusteredStringColumn

	SETTINGS cqlc.StringStringMapColumn

	TRANSPARENT_TARGET cqlc.StringColumn

	TYPE cqlc.StringColumn
}

func BindDomains(iter *gocql.Iter) ([]Domains, error) {
	array := make([]Domains, 0)
	err := MapDomains(iter, func(t Domains) (bool, error) {
		array = append(array, t)
		return true, nil
	})
	return array, err
}

func MapDomains(iter *gocql.Iter, callback func(t Domains) (bool, error)) error {
	columns := iter.Columns()
	row := make([]interface{}, len(columns))

	for {
		t := Domains{}

		for i := 0; i < len(columns); i++ {
			switch columns[i].Name {

			case "domain_name":
				row[i] = &t.DomainName

			case "id":
				row[i] = &t.Id

			case "organization_id":
				row[i] = &t.OrganizationId

			case "organization_name":
				row[i] = &t.OrganizationName

			case "port":
				row[i] = &t.Port

			case "settings":
				row[i] = &t.Settings

			case "transparent_target":
				row[i] = &t.TransparentTarget

			case "type":
				row[i] = &t.Type

			default:
				log.Fatal("unhandled column: ", columns[i].Name)
			}
		}
		if !iter.Scan(row...) {
			break
		}

		readNext, err := callback(t)
		if err != nil {
			return err
		}
		if !readNext {
			return nil
		}
	}

	return nil
}

func (s *DomainsDef) SupportsUpsert() bool {
	return true
}

func (s *DomainsDef) TableName() string {
	return "domains"
}

func (s *DomainsDef) Keyspace() string {
	return "bio"
}

func (s *DomainsDef) Bind(v Domains) cqlc.TableBinding {
	cols := []cqlc.ColumnBinding{

		cqlc.ColumnBinding{Column: &DomainsDomainNameColumn{}, Value: v.DomainName},

		cqlc.ColumnBinding{Column: &DomainsIdColumn{}, Value: v.Id},

		cqlc.ColumnBinding{Column: &DomainsOrganizationIdColumn{}, Value: v.OrganizationId},

		cqlc.ColumnBinding{Column: &DomainsOrganizationNameColumn{}, Value: v.OrganizationName},

		cqlc.ColumnBinding{Column: &DomainsPortColumn{}, Value: v.Port},

		cqlc.ColumnBinding{Column: &DomainsSettingsColumn{}, Value: v.Settings},

		cqlc.ColumnBinding{Column: &DomainsTransparentTargetColumn{}, Value: v.TransparentTarget},

		cqlc.ColumnBinding{Column: &DomainsTypeColumn{}, Value: v.Type},
	}
	return cqlc.TableBinding{Table: &DomainsDef{}, Columns: cols}
}

func (s *DomainsDef) To(v *Domains) cqlc.TableBinding {
	cols := []cqlc.ColumnBinding{

		cqlc.ColumnBinding{Column: &DomainsDomainNameColumn{}, Value: &v.DomainName},

		cqlc.ColumnBinding{Column: &DomainsIdColumn{}, Value: &v.Id},

		cqlc.ColumnBinding{Column: &DomainsOrganizationIdColumn{}, Value: &v.OrganizationId},

		cqlc.ColumnBinding{Column: &DomainsOrganizationNameColumn{}, Value: &v.OrganizationName},

		cqlc.ColumnBinding{Column: &DomainsPortColumn{}, Value: &v.Port},

		cqlc.ColumnBinding{Column: &DomainsSettingsColumn{}, Value: &v.Settings},

		cqlc.ColumnBinding{Column: &DomainsTransparentTargetColumn{}, Value: &v.TransparentTarget},

		cqlc.ColumnBinding{Column: &DomainsTypeColumn{}, Value: &v.Type},
	}
	return cqlc.TableBinding{Table: &DomainsDef{}, Columns: cols}
}

func (s *DomainsDef) ColumnDefinitions() []cqlc.Column {
	return []cqlc.Column{

		&DomainsDomainNameColumn{},

		&DomainsIdColumn{},

		&DomainsOrganizationIdColumn{},

		&DomainsOrganizationNameColumn{},

		&DomainsPortColumn{},

		&DomainsSettingsColumn{},

		&DomainsTransparentTargetColumn{},

		&DomainsTypeColumn{},
	}
}

func DomainsTableDef() *DomainsDef {
	return &DomainsDef{

		DOMAIN_NAME: &DomainsDomainNameColumn{},

		ID: &DomainsIdColumn{},

		ORGANIZATION_ID: &DomainsOrganizationIdColumn{},

		ORGANIZATION_NAME: &DomainsOrganizationNameColumn{},

		PORT: &DomainsPortColumn{},

		SETTINGS: &DomainsSettingsColumn{},

		TRANSPARENT_TARGET: &DomainsTransparentTargetColumn{},

		TYPE: &DomainsTypeColumn{},
	}
}

func (s *DomainsDef) DomainNameColumn() cqlc.ClusteredStringColumn {
	return &DomainsDomainNameColumn{}
}

func (s *DomainsDef) IdColumn() cqlc.LastPartitionedUUIDColumn {
	return &DomainsIdColumn{}
}

func (s *DomainsDef) OrganizationIdColumn() cqlc.EqualityStringColumn {
	return &DomainsOrganizationIdColumn{}
}

func (s *DomainsDef) OrganizationNameColumn() cqlc.StringColumn {
	return &DomainsOrganizationNameColumn{}
}

func (s *DomainsDef) PortColumn() cqlc.LastClusteredStringColumn {
	return &DomainsPortColumn{}
}

func (s *DomainsDef) SettingsColumn() cqlc.StringStringMapColumn {
	return &DomainsSettingsColumn{}
}

func (s *DomainsDef) TransparentTargetColumn() cqlc.StringColumn {
	return &DomainsTransparentTargetColumn{}
}

func (s *DomainsDef) TypeColumn() cqlc.StringColumn {
	return &DomainsTypeColumn{}
}

type OrganizationsBannedReasonColumn struct {
}

func (b *OrganizationsBannedReasonColumn) ColumnName() string {
	return "banned_reason"
}

func (b *OrganizationsBannedReasonColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsBillableColumn struct {
}

func (b *OrganizationsBillableColumn) ColumnName() string {
	return "billable"
}

func (b *OrganizationsBillableColumn) To(value *bool) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsBillingAddressCityColumn struct {
}

func (b *OrganizationsBillingAddressCityColumn) ColumnName() string {
	return "billing_address_city"
}

func (b *OrganizationsBillingAddressCityColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsBillingAddressCountryColumn struct {
}

func (b *OrganizationsBillingAddressCountryColumn) ColumnName() string {
	return "billing_address_country"
}

func (b *OrganizationsBillingAddressCountryColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsBillingAddressStateColumn struct {
}

func (b *OrganizationsBillingAddressStateColumn) ColumnName() string {
	return "billing_address_state"
}

func (b *OrganizationsBillingAddressStateColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsBillingAddressStreetColumn struct {
}

func (b *OrganizationsBillingAddressStreetColumn) ColumnName() string {
	return "billing_address_street"
}

func (b *OrganizationsBillingAddressStreetColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsBillingAddressZipColumn struct {
}

func (b *OrganizationsBillingAddressZipColumn) ColumnName() string {
	return "billing_address_zip"
}

func (b *OrganizationsBillingAddressZipColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsContactPrimaryEmailColumn struct {
}

func (b *OrganizationsContactPrimaryEmailColumn) ColumnName() string {
	return "contact_primary_email"
}

func (b *OrganizationsContactPrimaryEmailColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsContactPrimaryFaxColumn struct {
}

func (b *OrganizationsContactPrimaryFaxColumn) ColumnName() string {
	return "contact_primary_fax"
}

func (b *OrganizationsContactPrimaryFaxColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsContactPrimaryMobileColumn struct {
}

func (b *OrganizationsContactPrimaryMobileColumn) ColumnName() string {
	return "contact_primary_mobile"
}

func (b *OrganizationsContactPrimaryMobileColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsContactPrimaryPhoneColumn struct {
}

func (b *OrganizationsContactPrimaryPhoneColumn) ColumnName() string {
	return "contact_primary_phone"
}

func (b *OrganizationsContactPrimaryPhoneColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsFloatLicensesColumn struct {
}

func (b *OrganizationsFloatLicensesColumn) ColumnName() string {
	return "float_licenses"
}

func (b *OrganizationsFloatLicensesColumn) To(value *int32) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsFullNameColumn struct {
}

func (b *OrganizationsFullNameColumn) ColumnName() string {
	return "full_name"
}

func (b *OrganizationsFullNameColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsIdColumn struct {
}

func (b *OrganizationsIdColumn) ColumnName() string {
	return "id"
}

func (b *OrganizationsIdColumn) To(value *gocql.UUID) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *OrganizationsIdColumn) Eq(value gocql.UUID) cqlc.Condition {
	column := &OrganizationsIdColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

func (b *OrganizationsIdColumn) PartitionBy() cqlc.Column {
	return b
}

func (b *OrganizationsIdColumn) In(value ...gocql.UUID) cqlc.Condition {
	column := &OrganizationsIdColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.InPredicate}
}

type OrganizationsIsArchivedColumn struct {
}

func (b *OrganizationsIsArchivedColumn) ColumnName() string {
	return "is_archived"
}

func (b *OrganizationsIsArchivedColumn) To(value *bool) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsIsBannedColumn struct {
}

func (b *OrganizationsIsBannedColumn) ColumnName() string {
	return "is_banned"
}

func (b *OrganizationsIsBannedColumn) To(value *bool) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsNameColumn struct {
}

func (b *OrganizationsNameColumn) ColumnName() string {
	return "name"
}

func (b *OrganizationsNameColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsPagesLimitColumn struct {
}

func (b *OrganizationsPagesLimitColumn) ColumnName() string {
	return "pages_limit"
}

func (b *OrganizationsPagesLimitColumn) To(value *int32) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsServiceContractColumn struct {
}

func (b *OrganizationsServiceContractColumn) ColumnName() string {
	return "service_contract"
}

func (b *OrganizationsServiceContractColumn) To(value *gocql.UUID) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsServiceContractNameColumn struct {
}

func (b *OrganizationsServiceContractNameColumn) ColumnName() string {
	return "service_contract_name"
}

func (b *OrganizationsServiceContractNameColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsSlaContractColumn struct {
}

func (b *OrganizationsSlaContractColumn) ColumnName() string {
	return "sla_contract"
}

func (b *OrganizationsSlaContractColumn) To(value *gocql.UUID) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsSlaMinutesMaxColumn struct {
}

func (b *OrganizationsSlaMinutesMaxColumn) ColumnName() string {
	return "sla_minutes_max"
}

func (b *OrganizationsSlaMinutesMaxColumn) To(value *int32) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsSlaMinutesUsedColumn struct {
}

func (b *OrganizationsSlaMinutesUsedColumn) ColumnName() string {
	return "sla_minutes_used"
}

func (b *OrganizationsSlaMinutesUsedColumn) To(value *int32) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsSlaNameColumn struct {
}

func (b *OrganizationsSlaNameColumn) ColumnName() string {
	return "sla_name"
}

func (b *OrganizationsSlaNameColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type OrganizationsSlaResetColumn struct {
}

func (b *OrganizationsSlaResetColumn) ColumnName() string {
	return "sla_reset"
}

func (b *OrganizationsSlaResetColumn) To(value *time.Time) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type Organizations struct {
	BannedReason string

	Billable bool

	BillingAddressCity string

	BillingAddressCountry string

	BillingAddressState string

	BillingAddressStreet string

	BillingAddressZip string

	ContactPrimaryEmail string

	ContactPrimaryFax string

	ContactPrimaryMobile string

	ContactPrimaryPhone string

	FloatLicenses int32

	FullName string

	Id gocql.UUID

	IsArchived bool

	IsBanned bool

	Name string

	PagesLimit int32

	ServiceContract gocql.UUID

	ServiceContractName string

	SlaContract gocql.UUID

	SlaMinutesMax int32

	SlaMinutesUsed int32

	SlaName string

	SlaReset time.Time
}

func (s *Organizations) BannedReasonValue() string {
	return s.BannedReason
}

func (s *Organizations) BillableValue() bool {
	return s.Billable
}

func (s *Organizations) BillingAddressCityValue() string {
	return s.BillingAddressCity
}

func (s *Organizations) BillingAddressCountryValue() string {
	return s.BillingAddressCountry
}

func (s *Organizations) BillingAddressStateValue() string {
	return s.BillingAddressState
}

func (s *Organizations) BillingAddressStreetValue() string {
	return s.BillingAddressStreet
}

func (s *Organizations) BillingAddressZipValue() string {
	return s.BillingAddressZip
}

func (s *Organizations) ContactPrimaryEmailValue() string {
	return s.ContactPrimaryEmail
}

func (s *Organizations) ContactPrimaryFaxValue() string {
	return s.ContactPrimaryFax
}

func (s *Organizations) ContactPrimaryMobileValue() string {
	return s.ContactPrimaryMobile
}

func (s *Organizations) ContactPrimaryPhoneValue() string {
	return s.ContactPrimaryPhone
}

func (s *Organizations) FloatLicensesValue() int32 {
	return s.FloatLicenses
}

func (s *Organizations) FullNameValue() string {
	return s.FullName
}

func (s *Organizations) IdValue() gocql.UUID {
	return s.Id
}

func (s *Organizations) IsArchivedValue() bool {
	return s.IsArchived
}

func (s *Organizations) IsBannedValue() bool {
	return s.IsBanned
}

func (s *Organizations) NameValue() string {
	return s.Name
}

func (s *Organizations) PagesLimitValue() int32 {
	return s.PagesLimit
}

func (s *Organizations) ServiceContractValue() gocql.UUID {
	return s.ServiceContract
}

func (s *Organizations) ServiceContractNameValue() string {
	return s.ServiceContractName
}

func (s *Organizations) SlaContractValue() gocql.UUID {
	return s.SlaContract
}

func (s *Organizations) SlaMinutesMaxValue() int32 {
	return s.SlaMinutesMax
}

func (s *Organizations) SlaMinutesUsedValue() int32 {
	return s.SlaMinutesUsed
}

func (s *Organizations) SlaNameValue() string {
	return s.SlaName
}

func (s *Organizations) SlaResetValue() time.Time {
	return s.SlaReset
}

type OrganizationsDef struct {
	BANNED_REASON cqlc.StringColumn

	BILLABLE cqlc.BooleanColumn

	BILLING_ADDRESS_CITY cqlc.StringColumn

	BILLING_ADDRESS_COUNTRY cqlc.StringColumn

	BILLING_ADDRESS_STATE cqlc.StringColumn

	BILLING_ADDRESS_STREET cqlc.StringColumn

	BILLING_ADDRESS_ZIP cqlc.StringColumn

	CONTACT_PRIMARY_EMAIL cqlc.StringColumn

	CONTACT_PRIMARY_FAX cqlc.StringColumn

	CONTACT_PRIMARY_MOBILE cqlc.StringColumn

	CONTACT_PRIMARY_PHONE cqlc.StringColumn

	FLOAT_LICENSES cqlc.Int32Column

	FULL_NAME cqlc.StringColumn

	ID cqlc.LastPartitionedUUIDColumn

	IS_ARCHIVED cqlc.BooleanColumn

	IS_BANNED cqlc.BooleanColumn

	NAME cqlc.StringColumn

	PAGES_LIMIT cqlc.Int32Column

	SERVICE_CONTRACT cqlc.UUIDColumn

	SERVICE_CONTRACT_NAME cqlc.StringColumn

	SLA_CONTRACT cqlc.UUIDColumn

	SLA_MINUTES_MAX cqlc.Int32Column

	SLA_MINUTES_USED cqlc.Int32Column

	SLA_NAME cqlc.StringColumn

	SLA_RESET cqlc.TimestampColumn
}

func BindOrganizations(iter *gocql.Iter) ([]Organizations, error) {
	array := make([]Organizations, 0)
	err := MapOrganizations(iter, func(t Organizations) (bool, error) {
		array = append(array, t)
		return true, nil
	})
	return array, err
}

func MapOrganizations(iter *gocql.Iter, callback func(t Organizations) (bool, error)) error {
	columns := iter.Columns()
	row := make([]interface{}, len(columns))

	for {
		t := Organizations{}

		for i := 0; i < len(columns); i++ {
			switch columns[i].Name {

			case "banned_reason":
				row[i] = &t.BannedReason

			case "billable":
				row[i] = &t.Billable

			case "billing_address_city":
				row[i] = &t.BillingAddressCity

			case "billing_address_country":
				row[i] = &t.BillingAddressCountry

			case "billing_address_state":
				row[i] = &t.BillingAddressState

			case "billing_address_street":
				row[i] = &t.BillingAddressStreet

			case "billing_address_zip":
				row[i] = &t.BillingAddressZip

			case "contact_primary_email":
				row[i] = &t.ContactPrimaryEmail

			case "contact_primary_fax":
				row[i] = &t.ContactPrimaryFax

			case "contact_primary_mobile":
				row[i] = &t.ContactPrimaryMobile

			case "contact_primary_phone":
				row[i] = &t.ContactPrimaryPhone

			case "float_licenses":
				row[i] = &t.FloatLicenses

			case "full_name":
				row[i] = &t.FullName

			case "id":
				row[i] = &t.Id

			case "is_archived":
				row[i] = &t.IsArchived

			case "is_banned":
				row[i] = &t.IsBanned

			case "name":
				row[i] = &t.Name

			case "pages_limit":
				row[i] = &t.PagesLimit

			case "service_contract":
				row[i] = &t.ServiceContract

			case "service_contract_name":
				row[i] = &t.ServiceContractName

			case "sla_contract":
				row[i] = &t.SlaContract

			case "sla_minutes_max":
				row[i] = &t.SlaMinutesMax

			case "sla_minutes_used":
				row[i] = &t.SlaMinutesUsed

			case "sla_name":
				row[i] = &t.SlaName

			case "sla_reset":
				row[i] = &t.SlaReset

			default:
				log.Fatal("unhandled column: ", columns[i].Name)
			}
		}
		if !iter.Scan(row...) {
			break
		}

		readNext, err := callback(t)
		if err != nil {
			return err
		}
		if !readNext {
			return nil
		}
	}

	return nil
}

func (s *OrganizationsDef) SupportsUpsert() bool {
	return true
}

func (s *OrganizationsDef) TableName() string {
	return "organizations"
}

func (s *OrganizationsDef) Keyspace() string {
	return "bio"
}

func (s *OrganizationsDef) Bind(v Organizations) cqlc.TableBinding {
	cols := []cqlc.ColumnBinding{

		cqlc.ColumnBinding{Column: &OrganizationsBannedReasonColumn{}, Value: v.BannedReason},

		cqlc.ColumnBinding{Column: &OrganizationsBillableColumn{}, Value: v.Billable},

		cqlc.ColumnBinding{Column: &OrganizationsBillingAddressCityColumn{}, Value: v.BillingAddressCity},

		cqlc.ColumnBinding{Column: &OrganizationsBillingAddressCountryColumn{}, Value: v.BillingAddressCountry},

		cqlc.ColumnBinding{Column: &OrganizationsBillingAddressStateColumn{}, Value: v.BillingAddressState},

		cqlc.ColumnBinding{Column: &OrganizationsBillingAddressStreetColumn{}, Value: v.BillingAddressStreet},

		cqlc.ColumnBinding{Column: &OrganizationsBillingAddressZipColumn{}, Value: v.BillingAddressZip},

		cqlc.ColumnBinding{Column: &OrganizationsContactPrimaryEmailColumn{}, Value: v.ContactPrimaryEmail},

		cqlc.ColumnBinding{Column: &OrganizationsContactPrimaryFaxColumn{}, Value: v.ContactPrimaryFax},

		cqlc.ColumnBinding{Column: &OrganizationsContactPrimaryMobileColumn{}, Value: v.ContactPrimaryMobile},

		cqlc.ColumnBinding{Column: &OrganizationsContactPrimaryPhoneColumn{}, Value: v.ContactPrimaryPhone},

		cqlc.ColumnBinding{Column: &OrganizationsFloatLicensesColumn{}, Value: v.FloatLicenses},

		cqlc.ColumnBinding{Column: &OrganizationsFullNameColumn{}, Value: v.FullName},

		cqlc.ColumnBinding{Column: &OrganizationsIdColumn{}, Value: v.Id},

		cqlc.ColumnBinding{Column: &OrganizationsIsArchivedColumn{}, Value: v.IsArchived},

		cqlc.ColumnBinding{Column: &OrganizationsIsBannedColumn{}, Value: v.IsBanned},

		cqlc.ColumnBinding{Column: &OrganizationsNameColumn{}, Value: v.Name},

		cqlc.ColumnBinding{Column: &OrganizationsPagesLimitColumn{}, Value: v.PagesLimit},

		cqlc.ColumnBinding{Column: &OrganizationsServiceContractColumn{}, Value: v.ServiceContract},

		cqlc.ColumnBinding{Column: &OrganizationsServiceContractNameColumn{}, Value: v.ServiceContractName},

		cqlc.ColumnBinding{Column: &OrganizationsSlaContractColumn{}, Value: v.SlaContract},

		cqlc.ColumnBinding{Column: &OrganizationsSlaMinutesMaxColumn{}, Value: v.SlaMinutesMax},

		cqlc.ColumnBinding{Column: &OrganizationsSlaMinutesUsedColumn{}, Value: v.SlaMinutesUsed},

		cqlc.ColumnBinding{Column: &OrganizationsSlaNameColumn{}, Value: v.SlaName},

		cqlc.ColumnBinding{Column: &OrganizationsSlaResetColumn{}, Value: v.SlaReset},
	}
	return cqlc.TableBinding{Table: &OrganizationsDef{}, Columns: cols}
}

func (s *OrganizationsDef) To(v *Organizations) cqlc.TableBinding {
	cols := []cqlc.ColumnBinding{

		cqlc.ColumnBinding{Column: &OrganizationsBannedReasonColumn{}, Value: &v.BannedReason},

		cqlc.ColumnBinding{Column: &OrganizationsBillableColumn{}, Value: &v.Billable},

		cqlc.ColumnBinding{Column: &OrganizationsBillingAddressCityColumn{}, Value: &v.BillingAddressCity},

		cqlc.ColumnBinding{Column: &OrganizationsBillingAddressCountryColumn{}, Value: &v.BillingAddressCountry},

		cqlc.ColumnBinding{Column: &OrganizationsBillingAddressStateColumn{}, Value: &v.BillingAddressState},

		cqlc.ColumnBinding{Column: &OrganizationsBillingAddressStreetColumn{}, Value: &v.BillingAddressStreet},

		cqlc.ColumnBinding{Column: &OrganizationsBillingAddressZipColumn{}, Value: &v.BillingAddressZip},

		cqlc.ColumnBinding{Column: &OrganizationsContactPrimaryEmailColumn{}, Value: &v.ContactPrimaryEmail},

		cqlc.ColumnBinding{Column: &OrganizationsContactPrimaryFaxColumn{}, Value: &v.ContactPrimaryFax},

		cqlc.ColumnBinding{Column: &OrganizationsContactPrimaryMobileColumn{}, Value: &v.ContactPrimaryMobile},

		cqlc.ColumnBinding{Column: &OrganizationsContactPrimaryPhoneColumn{}, Value: &v.ContactPrimaryPhone},

		cqlc.ColumnBinding{Column: &OrganizationsFloatLicensesColumn{}, Value: &v.FloatLicenses},

		cqlc.ColumnBinding{Column: &OrganizationsFullNameColumn{}, Value: &v.FullName},

		cqlc.ColumnBinding{Column: &OrganizationsIdColumn{}, Value: &v.Id},

		cqlc.ColumnBinding{Column: &OrganizationsIsArchivedColumn{}, Value: &v.IsArchived},

		cqlc.ColumnBinding{Column: &OrganizationsIsBannedColumn{}, Value: &v.IsBanned},

		cqlc.ColumnBinding{Column: &OrganizationsNameColumn{}, Value: &v.Name},

		cqlc.ColumnBinding{Column: &OrganizationsPagesLimitColumn{}, Value: &v.PagesLimit},

		cqlc.ColumnBinding{Column: &OrganizationsServiceContractColumn{}, Value: &v.ServiceContract},

		cqlc.ColumnBinding{Column: &OrganizationsServiceContractNameColumn{}, Value: &v.ServiceContractName},

		cqlc.ColumnBinding{Column: &OrganizationsSlaContractColumn{}, Value: &v.SlaContract},

		cqlc.ColumnBinding{Column: &OrganizationsSlaMinutesMaxColumn{}, Value: &v.SlaMinutesMax},

		cqlc.ColumnBinding{Column: &OrganizationsSlaMinutesUsedColumn{}, Value: &v.SlaMinutesUsed},

		cqlc.ColumnBinding{Column: &OrganizationsSlaNameColumn{}, Value: &v.SlaName},

		cqlc.ColumnBinding{Column: &OrganizationsSlaResetColumn{}, Value: &v.SlaReset},
	}
	return cqlc.TableBinding{Table: &OrganizationsDef{}, Columns: cols}
}

func (s *OrganizationsDef) ColumnDefinitions() []cqlc.Column {
	return []cqlc.Column{

		&OrganizationsBannedReasonColumn{},

		&OrganizationsBillableColumn{},

		&OrganizationsBillingAddressCityColumn{},

		&OrganizationsBillingAddressCountryColumn{},

		&OrganizationsBillingAddressStateColumn{},

		&OrganizationsBillingAddressStreetColumn{},

		&OrganizationsBillingAddressZipColumn{},

		&OrganizationsContactPrimaryEmailColumn{},

		&OrganizationsContactPrimaryFaxColumn{},

		&OrganizationsContactPrimaryMobileColumn{},

		&OrganizationsContactPrimaryPhoneColumn{},

		&OrganizationsFloatLicensesColumn{},

		&OrganizationsFullNameColumn{},

		&OrganizationsIdColumn{},

		&OrganizationsIsArchivedColumn{},

		&OrganizationsIsBannedColumn{},

		&OrganizationsNameColumn{},

		&OrganizationsPagesLimitColumn{},

		&OrganizationsServiceContractColumn{},

		&OrganizationsServiceContractNameColumn{},

		&OrganizationsSlaContractColumn{},

		&OrganizationsSlaMinutesMaxColumn{},

		&OrganizationsSlaMinutesUsedColumn{},

		&OrganizationsSlaNameColumn{},

		&OrganizationsSlaResetColumn{},
	}
}

func OrganizationsTableDef() *OrganizationsDef {
	return &OrganizationsDef{

		BANNED_REASON: &OrganizationsBannedReasonColumn{},

		BILLABLE: &OrganizationsBillableColumn{},

		BILLING_ADDRESS_CITY: &OrganizationsBillingAddressCityColumn{},

		BILLING_ADDRESS_COUNTRY: &OrganizationsBillingAddressCountryColumn{},

		BILLING_ADDRESS_STATE: &OrganizationsBillingAddressStateColumn{},

		BILLING_ADDRESS_STREET: &OrganizationsBillingAddressStreetColumn{},

		BILLING_ADDRESS_ZIP: &OrganizationsBillingAddressZipColumn{},

		CONTACT_PRIMARY_EMAIL: &OrganizationsContactPrimaryEmailColumn{},

		CONTACT_PRIMARY_FAX: &OrganizationsContactPrimaryFaxColumn{},

		CONTACT_PRIMARY_MOBILE: &OrganizationsContactPrimaryMobileColumn{},

		CONTACT_PRIMARY_PHONE: &OrganizationsContactPrimaryPhoneColumn{},

		FLOAT_LICENSES: &OrganizationsFloatLicensesColumn{},

		FULL_NAME: &OrganizationsFullNameColumn{},

		ID: &OrganizationsIdColumn{},

		IS_ARCHIVED: &OrganizationsIsArchivedColumn{},

		IS_BANNED: &OrganizationsIsBannedColumn{},

		NAME: &OrganizationsNameColumn{},

		PAGES_LIMIT: &OrganizationsPagesLimitColumn{},

		SERVICE_CONTRACT: &OrganizationsServiceContractColumn{},

		SERVICE_CONTRACT_NAME: &OrganizationsServiceContractNameColumn{},

		SLA_CONTRACT: &OrganizationsSlaContractColumn{},

		SLA_MINUTES_MAX: &OrganizationsSlaMinutesMaxColumn{},

		SLA_MINUTES_USED: &OrganizationsSlaMinutesUsedColumn{},

		SLA_NAME: &OrganizationsSlaNameColumn{},

		SLA_RESET: &OrganizationsSlaResetColumn{},
	}
}

func (s *OrganizationsDef) BannedReasonColumn() cqlc.StringColumn {
	return &OrganizationsBannedReasonColumn{}
}

func (s *OrganizationsDef) BillableColumn() cqlc.BooleanColumn {
	return &OrganizationsBillableColumn{}
}

func (s *OrganizationsDef) BillingAddressCityColumn() cqlc.StringColumn {
	return &OrganizationsBillingAddressCityColumn{}
}

func (s *OrganizationsDef) BillingAddressCountryColumn() cqlc.StringColumn {
	return &OrganizationsBillingAddressCountryColumn{}
}

func (s *OrganizationsDef) BillingAddressStateColumn() cqlc.StringColumn {
	return &OrganizationsBillingAddressStateColumn{}
}

func (s *OrganizationsDef) BillingAddressStreetColumn() cqlc.StringColumn {
	return &OrganizationsBillingAddressStreetColumn{}
}

func (s *OrganizationsDef) BillingAddressZipColumn() cqlc.StringColumn {
	return &OrganizationsBillingAddressZipColumn{}
}

func (s *OrganizationsDef) ContactPrimaryEmailColumn() cqlc.StringColumn {
	return &OrganizationsContactPrimaryEmailColumn{}
}

func (s *OrganizationsDef) ContactPrimaryFaxColumn() cqlc.StringColumn {
	return &OrganizationsContactPrimaryFaxColumn{}
}

func (s *OrganizationsDef) ContactPrimaryMobileColumn() cqlc.StringColumn {
	return &OrganizationsContactPrimaryMobileColumn{}
}

func (s *OrganizationsDef) ContactPrimaryPhoneColumn() cqlc.StringColumn {
	return &OrganizationsContactPrimaryPhoneColumn{}
}

func (s *OrganizationsDef) FloatLicensesColumn() cqlc.Int32Column {
	return &OrganizationsFloatLicensesColumn{}
}

func (s *OrganizationsDef) FullNameColumn() cqlc.StringColumn {
	return &OrganizationsFullNameColumn{}
}

func (s *OrganizationsDef) IdColumn() cqlc.LastPartitionedUUIDColumn {
	return &OrganizationsIdColumn{}
}

func (s *OrganizationsDef) IsArchivedColumn() cqlc.BooleanColumn {
	return &OrganizationsIsArchivedColumn{}
}

func (s *OrganizationsDef) IsBannedColumn() cqlc.BooleanColumn {
	return &OrganizationsIsBannedColumn{}
}

func (s *OrganizationsDef) NameColumn() cqlc.StringColumn {
	return &OrganizationsNameColumn{}
}

func (s *OrganizationsDef) PagesLimitColumn() cqlc.Int32Column {
	return &OrganizationsPagesLimitColumn{}
}

func (s *OrganizationsDef) ServiceContractColumn() cqlc.UUIDColumn {
	return &OrganizationsServiceContractColumn{}
}

func (s *OrganizationsDef) ServiceContractNameColumn() cqlc.StringColumn {
	return &OrganizationsServiceContractNameColumn{}
}

func (s *OrganizationsDef) SlaContractColumn() cqlc.UUIDColumn {
	return &OrganizationsSlaContractColumn{}
}

func (s *OrganizationsDef) SlaMinutesMaxColumn() cqlc.Int32Column {
	return &OrganizationsSlaMinutesMaxColumn{}
}

func (s *OrganizationsDef) SlaMinutesUsedColumn() cqlc.Int32Column {
	return &OrganizationsSlaMinutesUsedColumn{}
}

func (s *OrganizationsDef) SlaNameColumn() cqlc.StringColumn {
	return &OrganizationsSlaNameColumn{}
}

func (s *OrganizationsDef) SlaResetColumn() cqlc.TimestampColumn {
	return &OrganizationsSlaResetColumn{}
}

type UsersAccessTokenColumn struct {
}

func (b *UsersAccessTokenColumn) ColumnName() string {
	return "access_token"
}

func (b *UsersAccessTokenColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *UsersAccessTokenColumn) Eq(value string) cqlc.Condition {
	column := &UsersAccessTokenColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

type UsersBetaFeaturesColumn struct {
}

func (b *UsersBetaFeaturesColumn) ColumnName() string {
	return "beta_features"
}

func (b *UsersBetaFeaturesColumn) To(value *bool) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type UsersEmailColumn struct {
}

func (b *UsersEmailColumn) ColumnName() string {
	return "email"
}

func (b *UsersEmailColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *UsersEmailColumn) Eq(value string) cqlc.Condition {
	column := &UsersEmailColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

func (b *UsersEmailColumn) PartitionBy() cqlc.Column {
	return b
}

func (b *UsersEmailColumn) In(value ...string) cqlc.Condition {
	column := &UsersEmailColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.InPredicate}
}

type UsersEncryptedPasswordColumn struct {
}

func (b *UsersEncryptedPasswordColumn) ColumnName() string {
	return "encrypted_password"
}

func (b *UsersEncryptedPasswordColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type UsersFullNameColumn struct {
}

func (b *UsersFullNameColumn) ColumnName() string {
	return "full_name"
}

func (b *UsersFullNameColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type UsersHmacSigningKeyColumn struct {
}

func (b *UsersHmacSigningKeyColumn) ColumnName() string {
	return "hmac_signing_key"
}

func (b *UsersHmacSigningKeyColumn) To(value *[]byte) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type UsersIdColumn struct {
}

func (b *UsersIdColumn) ColumnName() string {
	return "id"
}

func (b *UsersIdColumn) To(value *gocql.UUID) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type UsersIsActiveColumn struct {
}

func (b *UsersIsActiveColumn) ColumnName() string {
	return "is_active"
}

func (b *UsersIsActiveColumn) To(value *bool) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type UsersIsAdminColumn struct {
}

func (b *UsersIsAdminColumn) ColumnName() string {
	return "is_admin"
}

func (b *UsersIsAdminColumn) To(value *bool) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type UsersNameColumn struct {
}

func (b *UsersNameColumn) ColumnName() string {
	return "name"
}

func (b *UsersNameColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type UsersOrganizationIdColumn struct {
}

func (b *UsersOrganizationIdColumn) ColumnName() string {
	return "organization_id"
}

func (b *UsersOrganizationIdColumn) To(value *gocql.UUID) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type UsersProviderColumn struct {
}

func (b *UsersProviderColumn) ColumnName() string {
	return "provider"
}

func (b *UsersProviderColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type UsersUidColumn struct {
}

func (b *UsersUidColumn) ColumnName() string {
	return "uid"
}

func (b *UsersUidColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type Users struct {
	AccessToken string

	BetaFeatures bool

	Email string

	EncryptedPassword string

	FullName string

	HmacSigningKey []byte

	Id gocql.UUID

	IsActive bool

	IsAdmin bool

	Name string

	OrganizationId gocql.UUID

	Provider string

	Uid string
}

func (s *Users) AccessTokenValue() string {
	return s.AccessToken
}

func (s *Users) BetaFeaturesValue() bool {
	return s.BetaFeatures
}

func (s *Users) EmailValue() string {
	return s.Email
}

func (s *Users) EncryptedPasswordValue() string {
	return s.EncryptedPassword
}

func (s *Users) FullNameValue() string {
	return s.FullName
}

func (s *Users) HmacSigningKeyValue() []byte {
	return s.HmacSigningKey
}

func (s *Users) IdValue() gocql.UUID {
	return s.Id
}

func (s *Users) IsActiveValue() bool {
	return s.IsActive
}

func (s *Users) IsAdminValue() bool {
	return s.IsAdmin
}

func (s *Users) NameValue() string {
	return s.Name
}

func (s *Users) OrganizationIdValue() gocql.UUID {
	return s.OrganizationId
}

func (s *Users) ProviderValue() string {
	return s.Provider
}

func (s *Users) UidValue() string {
	return s.Uid
}

type UsersDef struct {
	ACCESS_TOKEN cqlc.EqualityStringColumn

	BETA_FEATURES cqlc.BooleanColumn

	EMAIL cqlc.LastPartitionedStringColumn

	ENCRYPTED_PASSWORD cqlc.StringColumn

	FULL_NAME cqlc.StringColumn

	HMAC_SIGNING_KEY cqlc.BytesColumn

	ID cqlc.UUIDColumn

	IS_ACTIVE cqlc.BooleanColumn

	IS_ADMIN cqlc.BooleanColumn

	NAME cqlc.StringColumn

	ORGANIZATION_ID cqlc.UUIDColumn

	PROVIDER cqlc.StringColumn

	UID cqlc.StringColumn
}

func BindUsers(iter *gocql.Iter) ([]Users, error) {
	array := make([]Users, 0)
	err := MapUsers(iter, func(t Users) (bool, error) {
		array = append(array, t)
		return true, nil
	})
	return array, err
}

func MapUsers(iter *gocql.Iter, callback func(t Users) (bool, error)) error {
	columns := iter.Columns()
	row := make([]interface{}, len(columns))

	for {
		t := Users{}

		for i := 0; i < len(columns); i++ {
			switch columns[i].Name {

			case "access_token":
				row[i] = &t.AccessToken

			case "beta_features":
				row[i] = &t.BetaFeatures

			case "email":
				row[i] = &t.Email

			case "encrypted_password":
				row[i] = &t.EncryptedPassword

			case "full_name":
				row[i] = &t.FullName

			case "hmac_signing_key":
				row[i] = &t.HmacSigningKey

			case "id":
				row[i] = &t.Id

			case "is_active":
				row[i] = &t.IsActive

			case "is_admin":
				row[i] = &t.IsAdmin

			case "name":
				row[i] = &t.Name

			case "organization_id":
				row[i] = &t.OrganizationId

			case "provider":
				row[i] = &t.Provider

			case "uid":
				row[i] = &t.Uid

			default:
				log.Fatal("unhandled column: ", columns[i].Name)
			}
		}
		if !iter.Scan(row...) {
			break
		}

		readNext, err := callback(t)
		if err != nil {
			return err
		}
		if !readNext {
			return nil
		}
	}

	return nil
}

func (s *UsersDef) SupportsUpsert() bool {
	return true
}

func (s *UsersDef) TableName() string {
	return "users"
}

func (s *UsersDef) Keyspace() string {
	return "bio"
}

func (s *UsersDef) Bind(v Users) cqlc.TableBinding {
	cols := []cqlc.ColumnBinding{

		cqlc.ColumnBinding{Column: &UsersAccessTokenColumn{}, Value: v.AccessToken},

		cqlc.ColumnBinding{Column: &UsersBetaFeaturesColumn{}, Value: v.BetaFeatures},

		cqlc.ColumnBinding{Column: &UsersEmailColumn{}, Value: v.Email},

		cqlc.ColumnBinding{Column: &UsersEncryptedPasswordColumn{}, Value: v.EncryptedPassword},

		cqlc.ColumnBinding{Column: &UsersFullNameColumn{}, Value: v.FullName},

		cqlc.ColumnBinding{Column: &UsersHmacSigningKeyColumn{}, Value: v.HmacSigningKey},

		cqlc.ColumnBinding{Column: &UsersIdColumn{}, Value: v.Id},

		cqlc.ColumnBinding{Column: &UsersIsActiveColumn{}, Value: v.IsActive},

		cqlc.ColumnBinding{Column: &UsersIsAdminColumn{}, Value: v.IsAdmin},

		cqlc.ColumnBinding{Column: &UsersNameColumn{}, Value: v.Name},

		cqlc.ColumnBinding{Column: &UsersOrganizationIdColumn{}, Value: v.OrganizationId},

		cqlc.ColumnBinding{Column: &UsersProviderColumn{}, Value: v.Provider},

		cqlc.ColumnBinding{Column: &UsersUidColumn{}, Value: v.Uid},
	}
	return cqlc.TableBinding{Table: &UsersDef{}, Columns: cols}
}

func (s *UsersDef) To(v *Users) cqlc.TableBinding {
	cols := []cqlc.ColumnBinding{

		cqlc.ColumnBinding{Column: &UsersAccessTokenColumn{}, Value: &v.AccessToken},

		cqlc.ColumnBinding{Column: &UsersBetaFeaturesColumn{}, Value: &v.BetaFeatures},

		cqlc.ColumnBinding{Column: &UsersEmailColumn{}, Value: &v.Email},

		cqlc.ColumnBinding{Column: &UsersEncryptedPasswordColumn{}, Value: &v.EncryptedPassword},

		cqlc.ColumnBinding{Column: &UsersFullNameColumn{}, Value: &v.FullName},

		cqlc.ColumnBinding{Column: &UsersHmacSigningKeyColumn{}, Value: &v.HmacSigningKey},

		cqlc.ColumnBinding{Column: &UsersIdColumn{}, Value: &v.Id},

		cqlc.ColumnBinding{Column: &UsersIsActiveColumn{}, Value: &v.IsActive},

		cqlc.ColumnBinding{Column: &UsersIsAdminColumn{}, Value: &v.IsAdmin},

		cqlc.ColumnBinding{Column: &UsersNameColumn{}, Value: &v.Name},

		cqlc.ColumnBinding{Column: &UsersOrganizationIdColumn{}, Value: &v.OrganizationId},

		cqlc.ColumnBinding{Column: &UsersProviderColumn{}, Value: &v.Provider},

		cqlc.ColumnBinding{Column: &UsersUidColumn{}, Value: &v.Uid},
	}
	return cqlc.TableBinding{Table: &UsersDef{}, Columns: cols}
}

func (s *UsersDef) ColumnDefinitions() []cqlc.Column {
	return []cqlc.Column{

		&UsersAccessTokenColumn{},

		&UsersBetaFeaturesColumn{},

		&UsersEmailColumn{},

		&UsersEncryptedPasswordColumn{},

		&UsersFullNameColumn{},

		&UsersHmacSigningKeyColumn{},

		&UsersIdColumn{},

		&UsersIsActiveColumn{},

		&UsersIsAdminColumn{},

		&UsersNameColumn{},

		&UsersOrganizationIdColumn{},

		&UsersProviderColumn{},

		&UsersUidColumn{},
	}
}

func UsersTableDef() *UsersDef {
	return &UsersDef{

		ACCESS_TOKEN: &UsersAccessTokenColumn{},

		BETA_FEATURES: &UsersBetaFeaturesColumn{},

		EMAIL: &UsersEmailColumn{},

		ENCRYPTED_PASSWORD: &UsersEncryptedPasswordColumn{},

		FULL_NAME: &UsersFullNameColumn{},

		HMAC_SIGNING_KEY: &UsersHmacSigningKeyColumn{},

		ID: &UsersIdColumn{},

		IS_ACTIVE: &UsersIsActiveColumn{},

		IS_ADMIN: &UsersIsAdminColumn{},

		NAME: &UsersNameColumn{},

		ORGANIZATION_ID: &UsersOrganizationIdColumn{},

		PROVIDER: &UsersProviderColumn{},

		UID: &UsersUidColumn{},
	}
}

func (s *UsersDef) AccessTokenColumn() cqlc.EqualityStringColumn {
	return &UsersAccessTokenColumn{}
}

func (s *UsersDef) BetaFeaturesColumn() cqlc.BooleanColumn {
	return &UsersBetaFeaturesColumn{}
}

func (s *UsersDef) EmailColumn() cqlc.LastPartitionedStringColumn {
	return &UsersEmailColumn{}
}

func (s *UsersDef) EncryptedPasswordColumn() cqlc.StringColumn {
	return &UsersEncryptedPasswordColumn{}
}

func (s *UsersDef) FullNameColumn() cqlc.StringColumn {
	return &UsersFullNameColumn{}
}

func (s *UsersDef) HmacSigningKeyColumn() cqlc.BytesColumn {
	return &UsersHmacSigningKeyColumn{}
}

func (s *UsersDef) IdColumn() cqlc.UUIDColumn {
	return &UsersIdColumn{}
}

func (s *UsersDef) IsActiveColumn() cqlc.BooleanColumn {
	return &UsersIsActiveColumn{}
}

func (s *UsersDef) IsAdminColumn() cqlc.BooleanColumn {
	return &UsersIsAdminColumn{}
}

func (s *UsersDef) NameColumn() cqlc.StringColumn {
	return &UsersNameColumn{}
}

func (s *UsersDef) OrganizationIdColumn() cqlc.UUIDColumn {
	return &UsersOrganizationIdColumn{}
}

func (s *UsersDef) ProviderColumn() cqlc.StringColumn {
	return &UsersProviderColumn{}
}

func (s *UsersDef) UidColumn() cqlc.StringColumn {
	return &UsersUidColumn{}
}

type VlinkDomainIdColumn struct {
}

func (b *VlinkDomainIdColumn) ColumnName() string {
	return "domain_id"
}

func (b *VlinkDomainIdColumn) To(value *gocql.UUID) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *VlinkDomainIdColumn) Eq(value gocql.UUID) cqlc.Condition {
	column := &VlinkDomainIdColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

type VlinkDomainNameColumn struct {
}

func (b *VlinkDomainNameColumn) ColumnName() string {
	return "domain_name"
}

func (b *VlinkDomainNameColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *VlinkDomainNameColumn) Eq(value string) cqlc.Condition {
	column := &VlinkDomainNameColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

func (b *VlinkDomainNameColumn) PartitionBy() cqlc.Column {
	return b
}

type VlinkDomainPortColumn struct {
}

func (b *VlinkDomainPortColumn) ColumnName() string {
	return "domain_port"
}

func (b *VlinkDomainPortColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *VlinkDomainPortColumn) Eq(value string) cqlc.Condition {
	column := &VlinkDomainPortColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

func (b *VlinkDomainPortColumn) PartitionBy() cqlc.Column {
	return b
}

func (b *VlinkDomainPortColumn) In(value ...string) cqlc.Condition {
	column := &VlinkDomainPortColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.InPredicate}
}

type VlinkOrganizationIdColumn struct {
}

func (b *VlinkOrganizationIdColumn) ColumnName() string {
	return "organization_id"
}

func (b *VlinkOrganizationIdColumn) To(value *gocql.UUID) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type VlinkOrganizationNameColumn struct {
}

func (b *VlinkOrganizationNameColumn) ColumnName() string {
	return "organization_name"
}

func (b *VlinkOrganizationNameColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type Vlink struct {
	DomainId gocql.UUID

	DomainName string

	DomainPort string

	OrganizationId gocql.UUID

	OrganizationName string
}

func (s *Vlink) DomainIdValue() gocql.UUID {
	return s.DomainId
}

func (s *Vlink) DomainNameValue() string {
	return s.DomainName
}

func (s *Vlink) DomainPortValue() string {
	return s.DomainPort
}

func (s *Vlink) OrganizationIdValue() gocql.UUID {
	return s.OrganizationId
}

func (s *Vlink) OrganizationNameValue() string {
	return s.OrganizationName
}

type VlinkDef struct {
	DOMAIN_ID cqlc.EqualityUUIDColumn

	DOMAIN_NAME cqlc.PartitionedStringColumn

	DOMAIN_PORT cqlc.LastPartitionedStringColumn

	ORGANIZATION_ID cqlc.UUIDColumn

	ORGANIZATION_NAME cqlc.StringColumn
}

func BindVlink(iter *gocql.Iter) ([]Vlink, error) {
	array := make([]Vlink, 0)
	err := MapVlink(iter, func(t Vlink) (bool, error) {
		array = append(array, t)
		return true, nil
	})
	return array, err
}

func MapVlink(iter *gocql.Iter, callback func(t Vlink) (bool, error)) error {
	columns := iter.Columns()
	row := make([]interface{}, len(columns))

	for {
		t := Vlink{}

		for i := 0; i < len(columns); i++ {
			switch columns[i].Name {

			case "domain_id":
				row[i] = &t.DomainId

			case "domain_name":
				row[i] = &t.DomainName

			case "domain_port":
				row[i] = &t.DomainPort

			case "organization_id":
				row[i] = &t.OrganizationId

			case "organization_name":
				row[i] = &t.OrganizationName

			default:
				log.Fatal("unhandled column: ", columns[i].Name)
			}
		}
		if !iter.Scan(row...) {
			break
		}

		readNext, err := callback(t)
		if err != nil {
			return err
		}
		if !readNext {
			return nil
		}
	}

	return nil
}

func (s *VlinkDef) SupportsUpsert() bool {
	return true
}

func (s *VlinkDef) TableName() string {
	return "vlink"
}

func (s *VlinkDef) Keyspace() string {
	return "bio"
}

func (s *VlinkDef) Bind(v Vlink) cqlc.TableBinding {
	cols := []cqlc.ColumnBinding{

		cqlc.ColumnBinding{Column: &VlinkDomainIdColumn{}, Value: v.DomainId},

		cqlc.ColumnBinding{Column: &VlinkDomainNameColumn{}, Value: v.DomainName},

		cqlc.ColumnBinding{Column: &VlinkDomainPortColumn{}, Value: v.DomainPort},

		cqlc.ColumnBinding{Column: &VlinkOrganizationIdColumn{}, Value: v.OrganizationId},

		cqlc.ColumnBinding{Column: &VlinkOrganizationNameColumn{}, Value: v.OrganizationName},
	}
	return cqlc.TableBinding{Table: &VlinkDef{}, Columns: cols}
}

func (s *VlinkDef) To(v *Vlink) cqlc.TableBinding {
	cols := []cqlc.ColumnBinding{

		cqlc.ColumnBinding{Column: &VlinkDomainIdColumn{}, Value: &v.DomainId},

		cqlc.ColumnBinding{Column: &VlinkDomainNameColumn{}, Value: &v.DomainName},

		cqlc.ColumnBinding{Column: &VlinkDomainPortColumn{}, Value: &v.DomainPort},

		cqlc.ColumnBinding{Column: &VlinkOrganizationIdColumn{}, Value: &v.OrganizationId},

		cqlc.ColumnBinding{Column: &VlinkOrganizationNameColumn{}, Value: &v.OrganizationName},
	}
	return cqlc.TableBinding{Table: &VlinkDef{}, Columns: cols}
}

func (s *VlinkDef) ColumnDefinitions() []cqlc.Column {
	return []cqlc.Column{

		&VlinkDomainIdColumn{},

		&VlinkDomainNameColumn{},

		&VlinkDomainPortColumn{},

		&VlinkOrganizationIdColumn{},

		&VlinkOrganizationNameColumn{},
	}
}

func VlinkTableDef() *VlinkDef {
	return &VlinkDef{

		DOMAIN_ID: &VlinkDomainIdColumn{},

		DOMAIN_NAME: &VlinkDomainNameColumn{},

		DOMAIN_PORT: &VlinkDomainPortColumn{},

		ORGANIZATION_ID: &VlinkOrganizationIdColumn{},

		ORGANIZATION_NAME: &VlinkOrganizationNameColumn{},
	}
}

func (s *VlinkDef) DomainIdColumn() cqlc.EqualityUUIDColumn {
	return &VlinkDomainIdColumn{}
}

func (s *VlinkDef) DomainNameColumn() cqlc.PartitionedStringColumn {
	return &VlinkDomainNameColumn{}
}

func (s *VlinkDef) DomainPortColumn() cqlc.LastPartitionedStringColumn {
	return &VlinkDomainPortColumn{}
}

func (s *VlinkDef) OrganizationIdColumn() cqlc.UUIDColumn {
	return &VlinkOrganizationIdColumn{}
}

func (s *VlinkDef) OrganizationNameColumn() cqlc.StringColumn {
	return &VlinkOrganizationNameColumn{}
}
